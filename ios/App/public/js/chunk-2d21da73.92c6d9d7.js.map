{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm-es5/ion-infinite-scroll_2.entry.js"],"names":["infiniteScrollCss","InfiniteScroll","class_1","hostRef","_this","this","ionInfinite","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","emit","prototype","thresholdChanged","val","lastIndexOf","parseFloat","disabledChanged","enableScrollEvents","connectedCallback","contentEl","_a","_b","label","closest","getScrollElement","console","error","sent","clientHeight","disconnectedCallback","undefined","complete","prev_1","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","render","mode","class","Object","defineProperty","get","enumerable","configurable","style","infiniteScrollContentIosCss","infiniteScrollContentMdCss","InfiniteScrollContent","componentDidLoad","loadingSpinner","name","loadingText","innerHTML","ios","md"],"mappings":"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","file":"js/chunk-2d21da73.92c6d9d7.js","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-92848855.js';\nimport { b as getIonMode, c as config } from './ionic-global-23e7365a.js';\nimport { s as sanitizeDOMString } from './index-79d74e0b.js';\nvar infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\nvar InfiniteScroll = /** @class */ (function () {\n    function class_1(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n        this.thrPx = 0;\n        this.thrPc = 0;\n        this.didFire = false;\n        this.isBusy = false;\n        this.isLoading = false;\n        /**\n         * The threshold distance from the bottom\n         * of the content to call the `infinite` output event when scrolled.\n         * The threshold value can be either a percent, or\n         * in pixels. For example, use the value of `10%` for the `infinite`\n         * output event to get called when the user has scrolled 10%\n         * from the bottom of the page. Use the value `100px` when the\n         * scroll is within 100 pixels from the bottom of the page.\n         */\n        this.threshold = '15%';\n        /**\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\n         * will be removed.\n         *\n         * Set this to true to disable the infinite scroll from actively\n         * trying to receive new data while scrolling. This is useful\n         * when it is known that there is no more data that can be added, and\n         * the infinite scroll is no longer needed.\n         */\n        this.disabled = false;\n        /**\n         * The position of the infinite scroll element.\n         * The value can be either `top` or `bottom`.\n         */\n        this.position = 'bottom';\n        this.onScroll = function () {\n            var scrollEl = _this.scrollEl;\n            if (!scrollEl || !_this.canStart()) {\n                return 1;\n            }\n            var infiniteHeight = _this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            var scrollTop = scrollEl.scrollTop;\n            var scrollHeight = scrollEl.scrollHeight;\n            var height = scrollEl.offsetHeight;\n            var threshold = _this.thrPc !== 0 ? (height * _this.thrPc) : _this.thrPx;\n            var distanceFromInfinite = (_this.position === 'bottom')\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!_this.didFire) {\n                    _this.isLoading = true;\n                    _this.didFire = true;\n                    _this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            else {\n                _this.didFire = false;\n            }\n            return 4;\n        };\n    }\n    class_1.prototype.thresholdChanged = function () {\n        var val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = (parseFloat(val) / 100);\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    };\n    class_1.prototype.disabledChanged = function () {\n        var disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    };\n    class_1.prototype.connectedCallback = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var contentEl, _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        contentEl = this.el.closest('ion-content');\n                        if (!contentEl) {\n                            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n                            return [2 /*return*/];\n                        }\n                        _a = this;\n                        return [4 /*yield*/, contentEl.getScrollElement()];\n                    case 1:\n                        _a.scrollEl = _b.sent();\n                        this.thresholdChanged();\n                        this.disabledChanged();\n                        if (this.position === 'top') {\n                            writeTask(function () {\n                                if (_this.scrollEl) {\n                                    _this.scrollEl.scrollTop = _this.scrollEl.scrollHeight - _this.scrollEl.clientHeight;\n                                }\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.disconnectedCallback = function () {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    };\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    class_1.prototype.complete = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var scrollEl, prev_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                scrollEl = this.scrollEl;\n                if (!this.isLoading || !scrollEl) {\n                    return [2 /*return*/];\n                }\n                this.isLoading = false;\n                if (this.position === 'top') {\n                    /**\n                     * New content is being added at the top, but the scrollTop position stays the same,\n                     * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n                     * (Frame 1)\n                     *    - complete() is called, but the UI hasn't had time to update yet.\n                     *    - Save the current content dimensions.\n                     *    - Wait for the next frame using _dom.read, so the UI will be updated.\n                     * (Frame 2)\n                     *    - Read the new content dimensions.\n                     *    - Calculate the height difference and the new scroll position.\n                     *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n                     * (Still frame 2, if I'm correct)\n                     *    - Change the scroll position (= visually maintain the scroll position).\n                     *    - Change the state to re-enable the InfiniteScroll.\n                     *    - This should be after changing the scroll position, or it could\n                     *    cause the InfiniteScroll to be triggered again immediately.\n                     * (Frame 3)\n                     *    Done.\n                     */\n                    this.isBusy = true;\n                    prev_1 = scrollEl.scrollHeight - scrollEl.scrollTop;\n                    // ******** DOM READ ****************\n                    requestAnimationFrame(function () {\n                        readTask(function () {\n                            // UI has updated, save the new content dimensions\n                            var scrollHeight = scrollEl.scrollHeight;\n                            // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                            var newScrollTop = scrollHeight - prev_1;\n                            // ******** DOM WRITE ****************\n                            requestAnimationFrame(function () {\n                                writeTask(function () {\n                                    scrollEl.scrollTop = newScrollTop;\n                                    _this.isBusy = false;\n                                });\n                            });\n                        });\n                    });\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    class_1.prototype.canStart = function () {\n        return (!this.disabled &&\n            !this.isBusy &&\n            !!this.scrollEl &&\n            !this.isLoading);\n    };\n    class_1.prototype.enableScrollEvents = function (shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    };\n    class_1.prototype.render = function () {\n        var _a;\n        var mode = getIonMode(this);\n        var disabled = this.disabled;\n        return (h(Host, { class: (_a = {},\n                _a[mode] = true,\n                _a['infinite-scroll-loading'] = this.isLoading,\n                _a['infinite-scroll-enabled'] = !disabled,\n                _a) }));\n    };\n    Object.defineProperty(class_1.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(class_1, \"watchers\", {\n        get: function () {\n            return {\n                \"threshold\": [\"thresholdChanged\"],\n                \"disabled\": [\"disabledChanged\"]\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return class_1;\n}());\nInfiniteScroll.style = infiniteScrollCss;\nvar infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\nvar infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\nvar InfiniteScrollContent = /** @class */ (function () {\n    function InfiniteScrollContent(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    InfiniteScrollContent.prototype.componentDidLoad = function () {\n        if (this.loadingSpinner === undefined) {\n            var mode = getIonMode(this);\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    };\n    InfiniteScrollContent.prototype.render = function () {\n        var _a;\n        var mode = getIonMode(this);\n        return (h(Host, { class: (_a = {},\n                _a[mode] = true,\n                // Used internally for styling\n                _a[\"infinite-scroll-content-\" + mode] = true,\n                _a) }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\n    };\n    return InfiniteScrollContent;\n}());\nInfiniteScrollContent.style = {\n    ios: infiniteScrollContentIosCss,\n    md: infiniteScrollContentMdCss\n};\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n"],"sourceRoot":""}